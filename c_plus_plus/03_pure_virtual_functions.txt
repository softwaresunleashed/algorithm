https://www.geeksforgeeks.org/pure-virtual-functions-and-abstract-classes/

Pure Virtual Functions(Abstract Function) and Abstract Classes in C++
======================================================
* Sometimes implementation of all function cannot be provided in a base class because we don’t know the implementation. Such a class is called abstract class.
* For example, let Shape be a base class. We cannot provide implementation of function draw() in Shape, but we know every derived class must have implementation of draw().
* Similarly an Animal class doesn’t have implementation of move() (assuming that all animals move), but all animals must know how to move. 

NOTE : 
We cannot create objects of abstract classes.


A pure virtual function (or abstract function) in C++ is a virtual function for which we don’t have implementation, we only declare it. A pure virtual function is declared by assigning 0 in declaration.

// An abstract class 
class Test 
{    
    // Data members of class 
public: 
    // Pure Virtual Function 
    virtual void show() = 0; 
    
   /* Other members */
}; 


A pure virtual function is implemented by classes which are derived from a Abstract class. Following is a simple example to demonstrate the same.

#include <iostream> 
using namespace std; 
  
class Base
{
    private:
        int x;
    public:
        virtual void fun() = 0;     /* Can't create instance of Base class - since it has an abstract  (pure virtual) function */
};

class Derived
{
    private:
        int y;
    public:
        void fun()
        {
            cout << "Derived fun() called..." << endl;
        }
};

int main()
{
    /* Can't create instance of Base class - since it has an abstract  (pure virtual) function */
    //Base objBase;     --> Not valid statement. will generate compiler error. 
    
    Derived objDerived;
    objDerived.fun();       // Valid statement. Derived class has implemented abstract / pure-virtual function

    return 0;
}


Some Interesting Facts:
-------------------------------
1) A class is abstract if it has at least one pure virtual function. (// pure virtual functions make a class abstract )

2) We can have pointers and references of abstract class type. (// We can have an Abstract Class Object pointing to Derived non-Abstract class.)

#include<iostream> 
using namespace std; 
  
class Base 
{ 
public: 
    virtual void show() = 0; 
}; 
  
class Derived: public Base 
{ 
public: 
    void show() { cout << "In Derived \n"; } 
}; 
  
int main(void) 
{ 
    Base *bp = new Derived(); 		// <-- Abstract Class Object pointing to Derived non-Abstract class.
    bp->show(); 
    return 0; 
}


3) If we do not override the pure virtual function in derived class, then derived class also becomes abstract class. 
Following program results in compilation error.

#include<iostream> 
using namespace std; 
class Base 
{ 
public: 
    virtual void show() = 0; 
}; 
  
class Derived : public Base { }; 
  
int main(void) 
{ 
  Derived d; 
  return 0; 
}


4) An abstract class can have constructors.

#include <iostream> 
using namespace std; 
  
class Base
{
    protected:
        int x;
    public:
        Base(int i)                 /* An Abstract class with constructor */
        {
            x = i;
        }
        
        virtual void display() = 0; /* Reason for class being Abstract */
};

class Derived : public Base
{
    int y;
    
    public:
    Derived(int i, int j) : Base(i)
    {
        y = j;
    }
    
    virtual void display()
    {
        cout << "x = " << x << endl << "y = " << y;
    }
    
};

int main()
{
    Derived d(10, 20);
    d.display();
}




Comparison with Java
-----------------------------
In Java, a class can be made abstract by using abstract keyword. Similarly a function can be made pure virtual or abstract by using abstract keyword. See
Abstract Classes in Java for more details.

Interface vs Abstract Classes:
----------------------------------------
An interface does not have implementation of any of its methods, it can be considered as a collection of method declarations. In C++, an interface can be simulated by making all methods as pure virtual. In Java, there is a separate keyword for interface.

