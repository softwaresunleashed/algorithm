https://www.geeksforgeeks.org/virtual-functions-and-runtime-polymorphism-in-c-set-1-introduction/

Virtual Functions and Runtime Polymorphism in C++
========================================
* Main thing to note about the program is that the derived classâ€™s function is called using a base class pointer.
* Idea is that virtual functions are called according to the type of the object instance pointed to or referenced, not according to the type of the pointer or reference.
* In other words, virtual functions are resolved late, at runtime.

#include <iostream> 
using namespace std;
class Base { 
public: 
    virtual void show() 
    { 
        cout << " In Base \n"; 
    } 
}; 

class Derived : public Base { 
public: 
    void show() 
    { 
        cout << "In Derived \n"; 
    } 
}; 
  
int main(void) 
{ 
    Base* bp = new Derived;     // RUN-TIME POLYMORPHISM 
    bp->show(); 
    return 0; 
}

Note : If i remove "virtual" keyword from Base class definition, then bp->show();  calls the show() of Base class...

What is the use (of Virtual Functions)?
============================
* Virtual functions allow us to create a list of base class pointers and call methods of any of the derived classes without even knowing kind of derived class object.
* Virtual functions are so useful that later languages like Java keep all methods as virtual by default.

Sample Code : Virtual Functions 
--------------------------------------------
#include<iostream>
using namespace std;

class Employee{
    public:
        virtual void raiseSalary()
        {
            /* Common base function that would be replaced with actual function 
            in object's derived class */
        }
        
        void globalRaiseSalary(Employee* emp[], int n) 
		{ 
		    for (int i = 0; i < n; i++)
		    { 
        		// Polymorphic Call: Calls raiseSalary() 
        		// according to the actual object, not 
        		// according to the type of pointer 
        		emp[i]->raiseSalary();
        	} 
		} 
};

class Engineer : public Employee {
    public:
    void raiseSalary()
    {
        cout << "Raising Salary of Engineer." << endl;
    }
};

class Manager : public Employee {
    public:
    void raiseSalary()
    {
        cout << "Raising Salary of Manager." << endl;
    }
};

int main()
{
    /* Object of type Employee pointing to Engineer class */
    Employee * objEmp = new Engineer;   
    
    /* object of Employee type, calling raiseSalary() of Engineer - Virtual function*/
    objEmp->raiseSalary();
    
    /* Object is now pointing to type Manager , 
    and calling raiseSalary() of Manager - Virtual function */
    objEmp = new Manager;
    objEmp->raiseSalary();
}

Compiler adds additional code at two places to maintain and use vptr.
--------------------------------------------------------------------------------------------
1) Code in every constructor. 
          This code sets the vptr of the object being created. 
          This code sets vptr to point to the vtable of the class.
2) Code with polymorphic function call (e.g. bp->show() in above code). 
          Wherever a polymorphic call is made, the compiler inserts code to first look for vptr using base class pointer or reference (In the above example, since pointed or referred object is of derived type, vptr of derived class is accessed). Once vptr is fetched, vtable of derived class can be accessed. Using vtable, address of derived derived class function show() is accessed and called.






