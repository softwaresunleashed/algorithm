https://www.geeksforgeeks.org/dynamic-programming/


Dynamic Programming
=================
* Dynamic Programming is mainly an optimization over plain recursion. 
* Wherever we see a recursive solution that has repeated calls for same inputs, we can optimize it using Dynamic Programming. 
* The idea is to simply store the results of subproblems, so that we do not have to re-compute them when needed later. This simple optimization reduces time complexities from exponential to polynomial.

For example, if we write simple recursive solution for Fibonacci Numbers, we get exponential time complexity and if we optimize it by storing solutions of subproblems, time complexity reduces to linear.

Recursion : Exponential Time Complexity
-------------------------------------------------------
int fib(int n)
{
	if(n <= 1)
		return n;
	
	return fib(n-1) + fib(n-2);
}


Dynamic Programming : Linear Time Complexity
----------------------------------------------------------------
#define MAX_COUNT		100
int f[MAX_COUNT];
f[0] = 0;
f[1] = 1;

int fib_cal(int n)
{
	for(i = 2; i <= n; i++)
	{
		f[i] = f[i-1] + f[i-2];
	}

	return f[n];
}

How to solve a Dynamic Programming Problem ?
------------------------------------------------------------------
https://www.geeksforgeeks.org/solve-dynamic-programming-problem/

Dynamic Programming (DP) is a technique that solves some particular type of problems in Polynomial Time. Dynamic Programming solutions are faster than exponential brute method and can be easily proved for their correctness.

Steps to solve a DP
---------------------------
1) Identify if it is a DP problem
2) Decide a state expression with least parameters
3) Formulate state relationship    
4) Do tabulation (or add memoization)


Step 1: Identify if it is a DP problem
------------------------------------------------
* all the problems that require to maximize or minimize certain quantity or counting problems that say to count the arrangements under certain condition or certain probability problems can be solved by using Dynamic Programming.
* All dynamic programming problems satisfy the overlapping subproblems property and most of the classic dynamic problems also satisfy the optimal substructure property. Once, we observe these properties in a given problem, be sure that it can be solved using DP.


Step 2 : Deciding the state
------------------------------------
DP problems are all about state and their transition. This is the most basic step which must be done very carefully because the state transition depends on the choice of state definition you make. So, let’s see what do we mean by the term “state”.

State 
A state can be defined as the set of parameters that can uniquely identify a certain position or standing in the given problem. This set of parameters should be as small as possible to reduce state space.

For example: In our famous Knapsack problem, we define our state by two parameters index and weight i.e DP[index][weight]. 
Here DP[index][weight] tells us the maximum profit it can make by taking items from range 0 to index having the capacity of sack to be weight.
Therefore, here the parameters index and weight together can uniquely identify a subproblem for the knapsack problem.

So, our first step will be deciding a state for the problem after identifying that the problem is a DP problem.

As we know DP is all about using calculated results to formulate the final result.
So, our next step will be to find a relation between previous states to reach the current state.

Step 3 : Formulating a relation among the states
----------------------------------------------------------------
This part is the hardest part of for solving a DP problem and requires a lot of intuition, observation and practice. Let’s understand it by considering a sample problem.

// Returns the number of arrangements to  
// form 'n'  
int solve(int n) 
{  
   // base case 
   if (n < 0)  
      return 0; 
   if (n == 0)   
      return 1;   
  
   return solve(n-1) + solve(n-3) + solve(n-5); 
}     

The above code seems exponential as it is calculating the same state again and again. So, we just need to add a memoization.


Step 4 : Adding memoization or tabulation for the state
-------------------------------------------------------------------------
This is the easiest part of a dynamic programming solution. We just need to store the state answer so that next time that state is required, we can directly use it from our memory.

Adding memoization to the above code

// initialize to -1 
int dp[MAXN]; 
  
// this function returns the number of  
// arrangements to form 'n'  
int solve(int n) 
{  
  // base case 
  if (n < 0)   
      return 0; 
  if (n == 0)   
      return 1; 
  
  // checking if already calculated 
  if (dp[n]!=-1)  
      return dp[n]; 
  
  // storing the result and returning 
  return dp[n] = solve(n-1) + solve(n-3) + solve(n-5); 
} 




Tabulation vs Memoization
------------------------------------
There are following two different ways to store the values so that the values of a sub-problem can be reused. Here, will discuss two patterns of solving DP problem:

1) Tabulation: Bottom Up
2) Memoization: Top Down

Tabulation Method – Bottom Up Dynamic Programming 
---------------------------------------------------------------------------
As the name itself suggests starting from the bottom and cumulating answers to the top. Let’s discuss in terms of state transition.

Let’s describe a state for our DP problem to be dp[x] with dp[0] as base state and dp[n] as our destination state. So,  we need to find the value of destination state i.e dp[n].
If we start our transition from our base state i.e dp[0] and follow our state transition relation to reach our destination state dp[n], we call it Bottom Up approach as it is quite clear that we started our transition from the bottom base state and reached the top most desired state.

Now, Why do we call it tabulation method?

To know this let’s first write some code to calculate the factorial of a number using bottom up approach. Once, again as our general procedure to solve a DP we first define a state. In this case, we define a state as dp[x], where dp[x] is to find the factorial of x.

Now, it is quite obvious that dp[x+1] = dp[x] * (x+1)

// Tabulated version to find factorial x.
int dp[MAXN];

// base case
int dp[0] = 1;
for (int i = 1; i< =n; i++)
{
    dp[i] = dp[i-1] * i;
}

The above code clearly follows the bottom-up approach as it starts its transition from the bottom-most base case dp[0] and reaches its destination state dp[n]. 
Here, we may notice that the dp table is being populated sequentially and we are directly accessing the calculated states from the table itself and hence, we call it tabulation method.

Memoization Method – Top Down Dynamic Programming 
----------------------------------------------------------------------------
Once, again let’s describe it in terms of state transition. If we need to find the value for some state say dp[n] and instead of starting from the base state that i.e dp[0] we ask our answer from the states that can reach the destination state dp[n] following the state transition relation, then it is the top-down fashion of DP.

Here, we start our journey from the top most destination state and compute its answer by taking in count the values of states that can reach the destination state, till we reach the bottom most base state.

Once again, let’s write the code for the factorial problem in the top-down fashion

// Memoized version to find factorial x.
// To speed up we store the values
// of calculated states

// initialized to -1
int dp[MAXN]

// return fact x!
int solve(int x)
{
    if (x==0)
        return 1;
    if (dp[x]!=-1)
        return dp[x];
    return (dp[x] = x * solve(x-1));
}

As we can see we are storing the most recent cache up to a limit so that if next time we got a call from the same state we simply return it from the memory. So, this is why we call it memoization as we are storing the most recent state values.

In this case the memory layout is linear that’s why it may seem that the memory is being filled in a sequential manner like the tabulation method, but you may consider any other top down DP having 2D memory layout like Min Cost Path, here the memory is not filled in a sequential manner.

