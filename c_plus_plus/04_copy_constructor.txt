https://www.geeksforgeeks.org/copy-constructor-in-cpp/

Copy Constructor in C++
===================

A copy constructor is a member function which initializes an object using another object of the same class. 

A copy constructor has the following general function prototype:
		ClassName (const ClassName &old_obj); 
		
Following is a simple example of copy constructor.
#include <iostream> 
using namespace std; 
  
class Point
{
    private:
        int x;
        int y;
    public:
        Point(int x1, int y1)
        {
            x = x1;
            y = y1;
        }
        
        // Copy constructor signature
        // <ClassName>(const <ClassName> &<objName>) { /* Do what it takes to copy constructor members */}
        Point(const Point &pointObj)
        {
            x = pointObj.x;
            y = pointObj.y;
        }
        
        int getX() { return x; }
        int getY() { return y;}
};

int main()
{
    // Normal constructor is called here.
    Point p1(10,20);
    cout << "p1 -> " << "x = " << p1.getX() << " y = " << p1.getY() << endl;
    cout << "Calling Copy constructor..." << endl;

    // Call Copy constructor
    Point p2 = p1;
    cout << "p2 -> " << "x = " << p2.getX() << " y = " << p2.getY() << endl;
    
    return 0;
}

When is copy constructor called?
-------------------------------------------
In C++, a Copy Constructor may be called in following cases:
1. When an object of the class is returned by value.
2. When an object of the class is passed (to a function) by value as an argument.
3. When an object is constructed based on another object of the same class.
4. When the compiler generates a temporary object.

It is, however, not guaranteed that a copy constructor will be called in all these cases, because the C++ Standard allows the compiler to optimize the copy away in certain cases, one example is the return value optimization (sometimes referred to as RVO).


When is user-defined copy constructor needed?
--------------------------------------------------------------
If we don’t define our own copy constructor, the C++ compiler creates a default copy constructor for each class which does a member-wise copy between objects. 
We need to define our own copy constructor only if an object has pointers or any runtime allocation of the resource like file handle, a network connection..etc.

Default constructor does only shallow copy. 
	* Shallow copy is when data is placed at one location and reference to it made by "copied / new" constructor. The data inside object isn't copied to another location for second object.

Deep copy is possible only with user defined copy constructor.
	* In user defined copy constructor, we make sure that pointers (or references) of copied object point to new memory locations.
	* ie. Data inside first constructor is copied to a new location and the second (new) object points to the newly allocated location rather than the location of members pointed in first object.
	
Copy constructor vs Assignment Operator
--------------------------------------------------------
Which of the following two statements call copy constructor and which one calls assignment operator?

MyClass t1, t2; 
MyClass t3 = t1;  // ----> (1) Copy Constructor invoked (either User Defined / Default Copy Constructor)
t2 = t1;          // -----> (2) Assignment Operator invoked

* Copy constructor is called when a new object is created from an existing object, as a copy of the existing object. - Case 1
* Assignment operator is called when an already initialized object is assigned a new value from another existing object.  - Case 2


Write an example class where copy constructor is needed?
See Program : 
-----------------
#include <iostream>
#include <cstring>
using namespace std; 

class MyString
{
    private:
        char * s;
        int size;
    public:
    	MyString(const char * str = NULL);    // Constructor
    	MyString(const MyString &);             // Copy Constructor
    	~MyString(){ delete [] s; };          // Destructor
    	void print(){ cout << s << endl; }  // Function to print string
    	void change(const char *);          // To change string of object
};

MyString::MyString(const char * str)
{
    size = strlen(str);
    s = new char[size + 1];
    strcpy(s, str);
}

MyString::MyString(const MyString & oldStrObj)
{
    size = oldStrObj.size;
    s = new char[size + 1];
    strcpy(s, oldStrObj.s);
}

void MyString::change(const char * str)
{
    delete [] s;
    size = strlen(str);
    s = new char[size + 1];
    strcpy(s, str);
}

int main()
{
    MyString str1("Sudhanshu is awesome...");
    MyString str2 = str1;
    
    str1.print();
    str2.print();

    str2.change("Sudhanshu is cool...");

    str1.print();
    str2.print(); 
    
    return 0;
}


What would be the problem if we remove copy constructor from above code?
-----------------------------------------------------------------------------------------------------
* If we remove copy constructor from the above program, we don’t get the expected output. 
* The changes made to str2 reflect in str1 as well which is never expected.

Can we make copy constructor private?
-----------------------------------------------------
* Yes, a copy constructor can be made private. 
* When we make a copy constructor private in a class, objects of that class become non-copyable. 
* This is particularly useful when our class has pointers or dynamically allocated resources. In such situations, we can either write our own copy constructor like above String example or make a private copy constructor so that users get compiler errors rather than surprises at runtime.

Why argument to a copy constructor must be passed as a reference?
--------------------------------------------------------------------------------------------
* A copy constructor is called when an object is passed by value. 
* Copy constructor itself is a function. 
* So if we pass an argument by value in a copy constructor, a call to copy constructor would be made to call copy constructor which becomes a non-terminating chain of calls. 
* Therefore compiler doesn’t allow parameters to be passed by value.


Why copy constructor argument should be const in C++?
----------------------------------------------------------------------------
When we create our own copy constructor, we pass an object by reference and we generally pass it as a const reference.

* One reason for passing const reference is, we should use const in C++ wherever possible so that objects are not accidentally modified. 
* This is one good reason for passing reference as const, but there is more to it. 
* For example, predict the output of following C++ program. Assume that copy elision is not done by compiler.

#include<iostream> 
using namespace std; 
  
class Test 
{ 
   /* Class data members */ 
public: 
   Test(Test &t) { /* Copy data members from t*/} 
   Test()        { /* Initialize data members */ } 
}; 
  
Test fun() 
{ 
    cout << "fun() Called\n"; 
    Test t; 
    return t; 
} 
  
int main() 
{ 
    Test t1; 
    Test t2 = fun(); 
    return 0; 
} 

Output:
 Compiler Error in line "Test t2 = fun();" 
 
The program looks fine at first look, but it has compiler error. 
If we add const in copy constructor, the program works fine, i.e., we change copy constructor to following.
		Test(const Test &t) { cout << "Copy Constructor Called\n"; } 

Or if we change the line “Test t2 = fun();” to following two lines, then also the program works fine.
		Test t2;  
		t2 = fun();

Explaination:
-----------------
The function fun() returns by value. So the compiler creates a temporary object which is copied to t2 using copy constructor in the original program (The temporary object is passed as an argument to copy constructor). 
The reason for compiler error is, compiler created temporary objects cannot be bound to non-const references and the original program tries to do that. It doesn’t make sense to modify compiler created temporary objects as they can die any moment.




















